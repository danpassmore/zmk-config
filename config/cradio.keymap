/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DVRK 0 /* dvorak */
#define QWRT 1 /* qwerty */
#define NMSM 2 /* numbers + symbols */
#define FNNV 3 /* function keys + navigation  */
#define MDMS 4 /* media + mouse */
#define BLE  5 /* for configuring bluetooth */


/* homerow mod placement ("left pinky mod" = LPMD, "left ring mod" = LRMD, etc) */
#define LPMD LGUI
#define LRMD LALT
#define LMMD LSFT
#define LIMD LCTL 
#define RPMD RGUI
#define RRMD RALT
#define RMMD RSFT
#define RIMD RCTL 

&lt {
    flavor = "balanced";
    tapping_term_ms = <150>;
    quick_tap_ms = <-1>;
};

&mt {
    flavor = "balanced";
    tapping_term_ms = <150>;
    quick_tap_ms = <-1>;
};

/ { 
    behaviors {
        bkspdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE"
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_toggle_layout {
            timeout-ms = <50>;
            key-positions = <0 9 20 29>;
            bindings = <&tog QWRT>;
        };

        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <14 15 24 25>;
            bindings = <&bootloader>;
        };

        combo_reset {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&reset>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        dvorak_layer {
            bindings = <
                &kp QUOT   &kp CMMA   &kp DOT    &kp P        &kp Y        /**/ &kp F        &kp G        &kp C      &kp R      &kp L 
                &mt LPMD A &mt LRMD O &mt LMMD E &mt LIMD U   &lt BLE I    /**/ &lt BLE D    &mt RIMD H   &mt RMMD T &mt LRMD N &mt RPMD S
                &kp SCLN   &kp Q      &lt MDMS J &kp K        &kp X        /**/ &kp B        &kp M        &lt MDMS W &kp V      &mt LSFT Z
                                                 &lt FNNV ESC &lt NMSM TAB /**/ &lt NMSM SPC &lt FNNV RET 
        };

        qwerty_layer {
            bindings = <
                &kp Q      &kp W      &kp E      &kp R        &kp T        /**/ &kp Y        &kp U        &kp I      &kp O      &kp P 
                &mt LPMD A &mt LRMD S &mt LMMD D &mt LIMD F   &lt BLE G    /**/ &lt BLE H    &mt RIMD J   &mt RMMD K &mt LRMD L &mt RPMD QUOT
                &kp Z      &kp X      &lt MDMS C &kp V        &kp B        /**/ &kp N        &kp M        &lt MDMS CMMA &kp DOT &mt LSFT RET
                                                 &lt FNNV ESC &lt NMSM TAB /**/ &lt NMSM SPC &lt FNNV RET 
                >;
        };

        nmsm_layer { /* numbers and symbols */
            bindings = <
                &kp KPLS   &kp N7     &kp N8     &kp N9       &kp PRCNT    /**/ &kp TILDE    &kp LBRC     &kp CRRT   &kp PIPE   &kp RBRC 
                &kp KMLT   &kp N4     &kp N5     &kp N6       &kp FSLH     /**/ &kp HASH     &kp LPRN     &kp EQUAL  &kp AMPS   &kp RPRN
                &kp N0     &kp N1     &kp N2     &kp N3       &kp BSLH     /**/ &kp GRAVE    &kp LBRK     &kp AT     &kp DLLR   &kp RBRK
                                                 &kp MINUS    &kp UNDER    /**/ &kp QMARK    &kp BANG 
        };

        fnnv_layer { /* function keys and navigation */
            bindings = <
                &kp F12    &kp F7     &kp F8     &kp F9       &kp PSCRN    /**/ &kp INSERT   &kp HOME     &kp PG_DN  &kp PG_UP  &kp END 
                &kp F11    &kp F4     &kp F5     &kp F6       &kp CAPS     /**/ &kp SLCK     &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT
                &kp F10    &kp F1     &kp F2     &kp F3       &kp PAUSE_BREAK   &none        &none        &none      &none      &none
                                                 &kp BKSP     &kp DEL      /**/ &kp BKSP     &kp DEL     
        };

        mdms_layer { /* media and mouse */
            bindings = <
                &kp K_VOL_DN &kp K_MUTE &kp K_MUTE &kp K_VOL_UP &none      /**/ &none        &none        &none      &none      &none 
                &kp K_PREV   &kp K_STOP &kp K_PP   &kp K_NEXT   &none      /**/ &none        &none        &none      &none      &none   
                &kp K_UNDO   &kp K_CUT  &kp K_COPY &kp K_PASTE  &kp K_REDO /**/ &none        &none        &none      &none      &none
                                                   &none        &none      /**/ &none        &none     
        };

        ble_layer { /* media and mouse */
            bindings = <
                &bt BT_SEL 11 &bt BT_SEL 7 &bt BT_SEL 8 &bt BT_SEL 9 &out OUT_BLE /**/ &out OUT_USB &none        &none      &none      &none 
                &bt BT_SEL 10 &bt BT_SEL 4 &bt BT_SEL 5 &bt BT_SEL 6 &none        /**/ &none        &none        &none      &none      &none   
                &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   /**/ &none        &none        &none      &none      &none
                                                        &bt BT_PRV   &bt BT_NXT   /**/ &none        &none     
        };
  };
};
